schema {
    query: Query
    mutation: Mutation
}

type Query {
    # Patient
    getFoodRestrictions(uuidPatient: String!, uuidUser: String!) : [Food]
    getPatientInfo(uuidPatient: String!, uuidUser: String!) : Patient
    getAllPatients(uuidUser: String!, indexPage: Int!, sizePage: Int!):[Patient]
    getPatientRecords(uuidPatient: String!,uuidUser: String!,indexPage: Int!, sizePage: Int!) : [PatientRecord]
    getSingleRecord(uuidRecord: String!) : PatientRecord

    # Food
    listFood(uuidUser: String!) : [FoodSimple]
    getFoodMeals(uuidFood: String!) : [MealType]
    getMeal(uuidUser: String!, mealType: String!) : Meal
}

type Mutation{
    # Patient
    createPatientRecord(uuidUser: String!, uuidPatient: String!,input: PatientRecordInput) : Boolean
    removePatientRecord(uuidPatientRecord: String!): Boolean
    updatePatientRecord(uuidPatientRecord: String!,input: PatientRecordInput): Boolean

    updateFoodRestrictions(uuidUser: String!, uuidPatient: String!, uuidFoods: [String]): Boolean

    createPatient(uuidUser: String!,input: PatientInput) : Boolean
    removePatient(uuidPatient: String!, uuidUser: String!): Boolean
    updatePatient(uuidPatient: String!,uuidUser: String! ,input: PatientInput): Boolean

    # Food
    createFood(uuidUser: String!, foodInput: NewFoodInput!, nutritionInput: NutritionFactsInput!) : Boolean
    customizeFood(uuidUser: String!, uuidFood: String!, customInput: CustomFoodInput!, nutritionInput: NutritionFactsInput!) : Boolean
    startMeals : Boolean
}

type Patient {
     uuid:  String
     name:  String
     ethnicGroup: Float
     email: String
     dateOfBirth: String
     nutritionist: String
     cpf: String
     biologicalSex: Int
}

input PatientInput {
    name:  String
    ethnicGroup: Float
    email: String
    dateOfBirth: String
    nutritionist: String
    cpf: String
    biologicalSex: Int
}

type PatientRecord{
    uuid: String
    uuidPatient: String
    corporalMass: Float
    height: Float
    abdominal: Float
    isAthlete: Boolean
    dateModified: String
    age: Int
    physicalActivityLevel: Float
    observations: String
    subscapular: Float
    triceps: Float
    biceps: Float
    chest: Float
    axillary: Float
    supriailiac: Float
    thigh: Float
    calf: Float
    waistCirc: Float
    abdominalCirc: Float
    hipsCirc:   Float
    rightArmCirc: Float
    thighCirc:  Float
    calfCirc:   Float
    muscularMass: Float
    corporalDensity: Float
    bodyFat:    Float
    methabolicRate: Float
    energyRequirements: Float
}

input PatientRecordInput{
    corporalMass: Float
    height: Float
    dateModified: String
    abdominal: Float
    isAthlete: Boolean
    age: Int
    physicalActivityLevel: Float
    observations: String
    subscapular: Float
    triceps: Float
    biceps: Float
    chest: Float
    axillary: Float
    supriailiac: Float
    thigh: Float
    calf: Float
    waistCirc: Float
    abdominalCirc: Float
    hipsCirc:   Float
    rightArmCirc: Float
    thighCirc:  Float
    calfCirc:   Float
    muscularMass: Float
    corporalDensity: Float
    bodyFat:    Float
    methabolicRate: Float
    energyRequirements: Float
}

type FoodSimple {
    uuid: String
    foodName: String
    foodGroup: String
    custom: Boolean
    created: Boolean
}

type Food {
    uuid: String
    foodName: String
    foodGroup: String
    measureTotalGrams: Float
    measureType: String
    measureAmount: Float
    custom: Boolean
    created: Boolean
    nutritionFacts: NutritionFacts
}

type NutritionFacts{
    calories: Float
    protein : Float
    carbohydrates: Float
    lipids: Float
    fiber: Float
}

input NewFoodInput {
    foodName: String
    foodGroup: String
    measureTotalGrams: Float
    measureType: String
    measureAmountValue: Float
}

input CustomFoodInput {
    measureTotalGrams: Float
    measureType: String
    measureAmountValue: Float
}

input NutritionFactsInput {
    calories: Float
    proteins: Float
    carbohydrates: Float
    lipids: Float
    fiber: Float
}

type Meal{
    mealType: MealType
    foodList: [FoodSimple]
}

enum MealType {
    BREAKFAST
    MORNING_SNACK
    LUNCH
    AFTERNOON_SNACK
    PRE_WORKOUT
    DINNER
}

