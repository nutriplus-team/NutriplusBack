schema {
    query: Query
    mutation: Mutation
}

type Query {
    getPatientInfo(uuidPatient: String!, uuidUser: String!) : Patient
    getAllPatients(uuidUser: String!, indexPage: Int!, sizePage: Int!):[Patient]
    getPatientRecords(uuidPatient: String!,uuidUser: String!,indexPage: Int!, sizePage: Int!) : [PatientRecord]
    getSingleRecord(uuidRecord: String!) : PatientRecord
    listFood(uuidUser: String!) : [FoodSimple]
}

type Mutation{
    createPatientRecord(uuidUser: String!, uuidPatient: String!,input: PatientRecordInput) : Boolean
    removePatientRecord(uuidPatientRecord: String!): Boolean
    updatePatientRecord(uuidPatientRecord: String!,input: PatientRecordInput): Boolean

    createPatient(uuidUser: String!,input: PatientInput) : Boolean
    removePatient(uuidPatient: String!, uuidUser: String!): Boolean
    updatePatient(uuidPatient: String!,uuidUser: String! ,input: PatientInput): Boolean

    createFood(uuidUser: String!, foodInput: NewFoodInput!, nutritionInput: NutritionFactsInput!) : Boolean
    customizeFood(uuidUser: String!, uuidFood: String!, customInput: CustomFoodInput!, nutritionInput: NutritionFactsInput!) : Boolean
}

type Patient {
     uuid:  String
     name:  String
     ethnicGroup: Float
     email: String
     dateOfBirth: String
     nutritionist: String
     cpf: String
     biologicalSex: Short
}

input PatientInput{
       name:  String
       ethnicGroup: Float
       email: String
       dateOfBirth: String
       nutritionist: String
       cpf: String
       biologicalSex: Short
}

type PatientRecord{
    uuidPatient: String
    corporalMass: Float
    height: Float
    abdominal: Float
    isAthlete: Boolean
    age: Int
    physicalActivityLevel: Float
    observations: String
    subscapular: Float
    triceps: Float
    biceps: Float
    chest: Float
    axillary: Float
    supriailiac: Float
    thigh: Float
    calf: Float
    waistCirc: Float
    abdominalCirc: Float
    hipsCirc:   Float
    rightArmCirc: Float
    thighCirc:  Float
    calfCirc:   Float
    muscularMass: Float
    corporalDensity: Float
    bodyFat:    Float
    methabolicRate: Float
    energyRequirements: Float
}

input PatientRecordInput{
        corporalMass: Float
        height: Float
        abdominal: Float
        isAthlete: Boolean
        age: Int
        physicalActivityLevel: Float
        observations: String
        subscapular: Float
        triceps: Float
        biceps: Float
        chest: Float
        axillary: Float
        supriailiac: Float
        thigh: Float
        calf: Float
        waistCirc: Float
        abdominalCirc: Float
        hipsCirc:   Float
        rightArmCirc: Float
        thighCirc:  Float
        calfCirc:   Float
        muscularMass: Float
        corporalDensity: Float
        bodyFat:    Float
        methabolicRate: Float
        energyRequirements: Float
}

type FoodSimple {
    uuid: String
    foodName: String
    foodGroup: String
    custom: Boolean
    created: Boolean
}

type FoodDetailed {
    uuid: String
    foodName: String
    foodGroup: String
    measureTotalGrams: Float
    measureType: String
    measureAmountValue: Float
    custom: Boolean
    created: Boolean
    nutritionFacts: NutritionFacts
}

type NutritionFacts {
    calories: Float
    proteins: Float
    carbohydrates: Float
    lipids: Float
    fiber: Float
}

input NewFoodInput {
    foodName: String
    foodGroup: String
    measureTotalGrams: Float
    measureType: String
    measureAmountValue: Float
}

input CustomFoodInput {
    measureTotalGrams: Float
    measureType: String
    measureAmountValue: Float
}

input NutritionFactsInput {
        calories: Float
        proteins: Float
        carbohydrates: Float
        lipids: Float
        fiber: Float
}