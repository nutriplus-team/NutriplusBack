schema {
    query: Query
    mutation: Mutation
}

type Query {
    # Patient
    getFoodRestrictions(uuidPatient: String!) : [Food]
    getPatientInfo(uuidPatient: String!) : Patient #
    getAllPatients(indexPage: Int!, sizePage: Int!):[Patient] #
    getPatientRecords(uuidPatient: String!, indexPage: Int!, sizePage: Int!) : [PatientRecord]
    getSingleRecord(uuidRecord: String!) : PatientRecord

    # Food
    listFood : [Food]
    listFoodPaginated(indexPage: Int!, sizePage: Int!) : [Food]
    searchFood(partialFoodName: String!, indexPage: Int!, sizePage: Int!) : [Food]
    listMealsThatAFoodBelongsTo(uuidFood: String!) : [Int]
    getMeal(mealType: Int!) : Meal
    getUnits(uuidFood: String!) : NutritionFacts

    #Menu
    getMenu(uuidMenu: String!, uuidPatient: String!): Menu
    getAllMenusForPatient(uuidPatient: String!): [Menu]
    getMenusForMeal(uuidPatient: String!, mealType: Int!): [Menu]
}

type Mutation{
    # Patient
    createPatientRecord(uuidPatient: String!, input: PatientRecordInput) : Boolean
    removePatientRecord(uuidPatientRecord: String!): Boolean
    updatePatientRecord(uuidPatient: String!,uuidPatientRecord: String!,input: PatientRecordInput): Boolean
    updateFoodRestrictions(uuidPatient: String!, uuidFoods: [String]): Boolean
    removeFoodRestrictions(uuidPatient: String!, uuidFoods: [String]): Boolean
    removeAllFoodRestrictions(uuidPatient: String!): Boolean
    createPatient(input: PatientInput) : Boolean #
    removePatient(uuidPatient: String!): Boolean
    updatePatient(uuidPatient: String!,input: PatientInput): Boolean

    # Food
    createFood(foodInput: NewFoodInput!, nutritionInput: NutritionFactsInput!) : Boolean
    customizeFood(uuidFood: String!, customInput: CustomFoodInput!, nutritionInput: NutritionFactsInput!) : Boolean
    removeFood(uuidFood: String!) : Boolean
    startMeals : Boolean
    addFoodToMeal(uuidFood: String!, mealTypes: [Int]) : Boolean
    removeFoodFromMeal(uuidFood: String!, mealType: Int!) : Boolean

    # Menu
    addMenu(mealType: Int!, uuidPatient: String!, uuidFoods: [String], quantities: [Float]) : String
    removeMenu(uuidMenu: String!) : Boolean
    editMenu(uuidMenu: String!, uuidFoods: [String], quantities: [Float]) : Boolean

}

type Patient {
     uuid:  String
     name:  String
     ethnicGroup: Float
     email: String
     dateOfBirth: String
     nutritionist: String
     cpf: String
     biologicalSex: Int
}


input PatientInput {
    name:  String
    ethnicGroup: Float
    email: String
    dateOfBirth: String
    nutritionist: String
    cpf: String
    biologicalSex: Int
}

type PatientRecord{
    uuid: String
    uuidPatient: String
    corporalMass: Float
    methodBodyFat: String
    methodMethabolicRate: String
    height: Float
    abdominal: Float
    isAthlete: Boolean
    dateModified: String
    age: Int
    physicalActivityLevel: Float
    observations: String
    subscapular: Float
    triceps: Float
    biceps: Float
    chest: Float
    axillary: Float
    supriailiac: Float
    thigh: Float
    calf: Float
    waistCirc: Float
    abdominalCirc: Float
    hipsCirc:   Float
    rightArmCirc: Float
    thighCirc:  Float
    calfCirc:   Float
    muscularMass: Float
    corporalDensity: Float
    bodyFat:    Float
    methabolicRate: Float
    energyRequirements: Float
}

input PatientRecordInput{
    methodBodyFat: String
    methodMethabolicRate: String
    corporalMass: Float
    height: Float
    abdominal: Float
    isAthlete: Boolean
    age: Int
    physicalActivityLevel: Float
    observations: String
    subscapular: Float
    triceps: Float
    biceps: Float
    chest: Float
    axillary: Float
    supriailiac: Float
    thigh: Float
    calf: Float
    waistCirc: Float
    abdominalCirc: Float
    hipsCirc:   Float
    rightArmCirc: Float
    thighCirc:  Float
    calfCirc:   Float
    muscularMass: Float
    corporalDensity: Float
    bodyFat:    Float
    methabolicRate: Float
    energyRequirements: Float
}

type Menu {
    uuid: String
    mealType: Int
    portions: [Portion]
}

type Portion {
    quantity: Float
    food: Food
}


type FoodSimple {
    uuid: String
    foodName: String
    foodGroup: String
    custom: Boolean
    created: Boolean
}

type Food {
    uuid: String
    foodName: String
    foodGroup: String
    measureTotalGrams: Float
    measureType: String
    measureAmount: Float
    custom: Boolean
    created: Boolean
    nutritionFacts: NutritionFacts
}

type NutritionFacts {
    calories: Float
    proteins : Float
    carbohydrates: Float
    lipids: Float
    fiber: Float
}

input NewFoodInput {
    foodName: String
    foodGroup: String
    measureTotalGrams: Float
    measureType: String
    measureAmountValue: Float
}

input CustomFoodInput {
    measureTotalGrams: Float
    measureType: String
    measureAmountValue: Float
}

input NutritionFactsInput {
    calories: Float
    proteins: Float
    carbohydrates: Float
    lipids: Float
    fiber: Float
}

type Meal{
    mealType: Int
    foodList: [FoodSimple]
}
